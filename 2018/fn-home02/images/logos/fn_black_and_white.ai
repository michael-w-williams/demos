%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 15.1.0
%%For: (win 8) ()
%%Title: (fn black and white.ai)
%%CreationDate: 9/30/2017 12:22 AM
%%Canvassize: 16383
%%BoundingBox: 1 54 609 667
%%HiResBoundingBox: 1.03564 54.8691 608.707 666.6396
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 27 42 585 750
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -209 813 1 1028 585 26 0 0 78 122 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 8120 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD1AFF52F8F827527DFD2DFFA87D2727F8F8F827527DA8FD41FF7D
%FD07F8527DFD29FF52FD0CF87DFD3FFF52FD0AF87DA8FD24FFA8FD0FF827
%FD3EFF7DFD0CF852FD22FFA8FD10F827FD3EFFA827FD0DF87DFD20FF27FD
%10F8A8FD3FFF52FD0EF8277DFD1DFF7DFD10F827FD40FFA8FD10F827FD1C
%FF27FD10F8A8FD41FF52FD11F87DFD19FFA8FD10F827FD42FFA8FD12F852
%A8FD17FF7DFD10F8A8FD43FF27FD13F87DFD16FFA8FD0AF827A8A852F827
%FD44FFA8FD14F852FD15FFA8FD0AF8A8FFFFFF7D7DFD3CFFA8FFA8FFA8FF
%A8FFA827FD0DF8522727FD04F827FD14FFA8FD0AF87DFD40FFF8F8F827F8
%F8F827F827FD0CF827FD04FF52FD04F827FD13FFA8FD0AF8A8FD3FFFA827
%FD15F8A8FFA87DFFFF27FD05F8FD0FFF7D525252FD0AF8277D527D527DFF
%7D527D527D527D527DFD04FF7D52272727527DA8FD3DFFF8F87DFF52FD06
%F8FD0EFF52FD13F8FFFD09F8FFFF7DFD09F852A8FD30FFA8FFFFFFA8FFFF
%FFA8FFA8F8F87DFF52FD07F8A8FD0CFF27FD12F827A827FD07F827A827FD
%0CF8A8FD2DFFA8F827F827F827F827F827A8FFA8A8FFFFFD08F827FD0CFF
%52FD12F827FFFD08F82727FD0DF827FD2DFFA8FD04F827FD05F827A8FFFF
%FF27FD09F827FD0BFF52FD12F827A827FD17F852FD1BFF27522752275227
%5227522752275227522752F8F827FFFFFF7DFD05F82752FD0CF827FD0AFF
%52FD12F827FFFD19F8A8FD19FFA8FD14F8FD05FF52FD13F852FD09FF52FD
%12F827A8FD19F852FD1AFFFD04A87DA8A8A87DA8A8A87DA8A8A87DA87DFF
%FFA8F827FFFFFD14F8A8FD08FF52FD13F8FFFD19F852FD2FFF52F8F8FFFF
%27FD13F827FD08FF7D525252FD0AF8277D527D527DA8FD0BF8527D7D7D27
%FD0AF8FD2CFF7D52FFFF52A8FFA8FD15F87DFD0AFFA8FD0AF8A8FD06FFFD
%0AF87DFD05FF27FD09F8A8FD2BFF7DF87DFD04FFFD17F8A8FD09FFA8FD0A
%F87DFD05FFA8FD09F852FD06FFA8FD09F8FD24FF7DFD075227F8F852527D
%FD07F87DFFFF7D27FD0CF827FD09FF7DFD0AF87DFD06FFFD09F8FD08FF27
%FD07F827FD24FF27FD13F87DFD04FF7DFD0DF87DFD08FFA8FD0AF87DFD05
%FFA8FD08F827FD08FF27FD08F8FD24FFFD137DA8FFFF2727A8FF27FD0CF8
%27FD08FFA8FD0AF87DFD06FFFD08F827FD08FF52FD07F827FD39FF7DF8F8
%7DFF52FD0DF8A8FD07FFA8FD0AF87DFD05FFA8FD08F827A8FD07FF27FD08
%F8FD2BFFA8FD0B527DFFFF527DFFFF27FD0DF827FD07FFA8FD0AF8A8FD06
%FFFD08F827FD08FF52FD07F827FD2BFFFD0DF852FD04FF52FD0FF8A8FD06
%FFA8FD0AF87DFD05FFA8FD08F827FD08FF27FD08F8FD2AFF52FD0EF8527D
%A827FD10F87DFD06FF7DFD0AF87DFD06FFFD08F827FD08FF52FD07F827FD
%29FF7DFD24F8FD06FFA8FD0AF87DFD05FFA8FD08F827FD08FF27FD08F8FD
%28FFA827FD24F8A8FD05FF7DFD0AF87DFD06FFFD08F827FD08FF52FD07F8
%27FD28FF27FD25F87DFD05FFA8FD0AF87DFD05FFA8FD08F827FD08FF27FD
%08F8FD27FF52FD26F852FD05FFA8FD0AF87DFD06FFFD08F827FD08FF52FD
%07F827FD26FF27FD27F852FD05FFA8FD0AF87DFD05FFA8FD08F827A8FD07
%FF27FD08F8FD25FF7DFD28F852FD05FFA8FD0AF8A8FD06FFFD08F827FD08
%FF52FD07F827FD25FF52FD27F827FD06FFA8FD0AF87DFD05FFA8FD08F827
%FD08FF27FD08F8FD26FF2727FD1FF827275252A8A8FD07FF7DFD0AF87DFD
%06FFFD08F827FD08FF52FD07F827FD27FFFD04A8FD047D527DFD04522752
%52522752525227FD04527D7DA87DFFA8FD0CFFA8527D527D527D527D5252
%A8FD05FFFD0AA8FD08FFFD09A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDFCFFFDFCFFFDFCFFFDFCFFFD35FF522752274B2752274B2752274B27
%52274B2752274B2752274B2752274B2752274B2752274B2752274B275227
%4B2752274B2752274B2752274B2752274B2752274B2752274B2752274B27
%52274B2752274B2752274B2752274B2752274B2752274B2752274B275227
%4B2752274B2752274B2752274B2752274B2752274B2752A8FD7FF8A8FD7F
%F8A8FD7FF8A827FD7EF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8
%A8FD7FF8A8FD7FF8A827FD19F8277DA87D5227FD2EF82727FD057D5252FD
%28F8A8FD1AF8A8FD05FFA87D27FD2AF87DA8FD09FF7D27FD25F8A8FD19F8
%27FD09FFA852FD26F852FD0EFFA827FD23F8A8FD1AF8A8FD0AFFA852FD23
%F852FD10FF52FD23F8A8FD1AF8A8FD0CFFA852FD20F827FD10FFA8FD24F8
%A8FD1AF827FD0EFFA827FD1EF8A8FD10FF27FD24F8A8FD1BF8A8FD0FFF7D
%27FD1BF852FD10FFA8FD25F8A8FD1BF852FD10FFA852FD1AF87DFD10FF52
%FD25F8A827FD1BF8FD12FFA8FD19F8A8FD0FFFA8FD26F8A8FD1CF852FD13
%FF27FD17F8A8FD0AFF7D52A8FFFF27FD26F8A8FD1CF827FD14FF52FD16F8
%FD0AFFA8F8F8F87DA8FD27F8A8FD1DF87DFD0EFFA8FD05FF7DFD15F8A8FD
%09FF7DFD2CF8A8FD13F852A87DA87D7D7DA87D7DA8FD0CFFA827F827A8FD
%04FFA827FD13F8FD0AFFA8FD2CF8A8FD13F8A8FD15FFA8FD05F8A8FD04FF
%A827FD0FF827F827FD0AFF7D27F827F827F827F8272727F8272727FD05F8
%27FD045227FD12F8A8FD13F8277DFD145227F852FF52F827FD06FF27FD0D
%F852FD13FF277DFD08FF52F82752FD07FFA87DFD10F8A8FD2BF8A8FFA8F8
%27A8FD05FFA827FD0CF827FD13FFF87DFD08FF2727A8FD0AFFA8FD0FF8A8
%27FD1DF8277DA87D7D7DA87D7D7DA827F827A827F852FD07FFA827FD0BF8
%52FD13FF277DFD08FF7DFD0EFF27FD0DF8A8FD1FF8A8FD0AFF27FD04F8FD
%09FFA8FD0BF827FD13FFF87DFD17FFA8FD0DF8A8FD0DF8277D527D527D52
%7D527D527D527D527D527DA8FFFFA8272752FD05FF525252FD0BFF7DFD0A
%F852FD13FF277DFD18FF52FD0CF8A8FD0DF8A8FD13FF7DFD04F827FD13FF
%52FD09F827FD13FFF87DFD18FF7DFD0CF8A8FD0DF8277D527D527D527D52
%7D527D527D527D527D7D7DF8F87DA8F8F87DFD13FF52FD08F852FD13FF27
%7DFD19FF27FD0BF8A8FD22F827FFFF52F87DFD14FFFD08F827A8A8A8FD0A
%FFFD06A8F87DFD0BFFA8527DA8FD0AFF52FD0BF8A8FD20F87DF8F87DA8F8
%F87DFD14FFA8FD0BF8FD0AFFA8FD06F87DFD09FFA827F8F8F8277DFD09FF
%52FD0BF8A8FD20F8FF7DFD04F827FD16FF52FD0AF8A8FD09FF7DFD06F87D
%FD09FF27FD06F8A8FD08FF52FD0BF8A827FD17F85227522752275252FFFF
%7D272752FD07FF52527DFD0DFFA827FD09F8FD0AFFA8FD06F87DFD08FF7D
%FD07F87DFD08FF52FD0BF8A8FD17F852FD14FFFD04F827FD0DFF52FD09F8
%A8FD09FF7DFD06F87DFD08FF27FD07F852FD08FF52FD0BF8A8FD17F827A8
%7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA827F8277D27F852FD0DFFFD09
%F8FD0AFFA8FD06F87DFD08FF52FD07F87DFD08FF52FD0BF8A8FD2DF8A8FF
%A8F827FD0DFF7DFD08F8A8FD09FF7DFD06F87DFD08FF27FD07F852FD08FF
%52FD0BF8A8FD1EF827275227522752275227522752F8F87DFF52F852FD0E
%FF27FD07F8FD0AFFA8FD06F87DFD08FF52FD07F87DFD08FF52FD0BF8A8FD
%1EF852FD0CFFA8FD05F8A8FD0EFF52FD07F8A8FD09FF7DFD06F87DFD08FF
%27FD07F852FD08FF52FD0BF8A8FD1EF8FD0EFFA8F8F827A8FD0FFFA8FD07
%F8FD0AFFA8FD06F87DFD08FF52FD07F87DFD08FF52FD0BF8A8FD1DF87DFD
%10FFA8FD12FF27FD06F8A8FD09FF7DFD06F87DFD08FF27FD07F852FD08FF
%52FD0BF8A827FD1BF852FD24FF7DFD06F8FD0AFFA8FD06F87DFD08FF52FD
%07F87DFD08FF52FD0BF8A8FD1BF827FD25FFA8FD06F8A8FD09FF7DFD06F8
%7DFD08FF27FD07F852FD08FF52FD0BF8A8FD1AF852FD26FFA827FD05F8FD
%0AFFA8FD06F87DFD08FF52FD07F87DFD08FF52FD0BF8A8FD19F827FD28FF
%FD06F8A8FD09FF7DFD06F87DFD08FF27FD07F852FD08FF52FD0BF8A8FD18
%F827A8FD28FF27FD05F8FD0AFFA8FD06F87DFD08FF52FD07F87DFD08FF52
%FD0BF8A8FD18F827FD28FF7DFD06F8A8FD09FF7DFD06F87DFD08FF27FD07
%F852FD08FF52FD0BF8A8FD18F827A8FD23FFA8A85252FD07F8FD0AFFA8FD
%06F87DFD08FF52FD07F87DFD08FF52FD0BF8A8FD1AF8275252FD047DA87D
%FD06A8FFA8FFA8FFA8FFFD04A87DA87D7D52522727FD0CF87DFD08A8FF7D
%FD06F8275252275252522752FD08F827522752525227525227FD0BF8A827
%FD23F827F8F8F827F827F827F827F827FD17F827F8F8F827F8F8F827FD23
%F827FD0AF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8A8
%FD7FF8A827FD7EF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD7FF8A8FD
%7FF8A8FD7FF8A8
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.75021 0.679683 0.670222 0.90164 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 O
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
0 J 0 j 1 w 10 M []0 d1 XR
1.28564 378.2217 m
608.457 378.2217 L
608.457 55.1191 L
1.28564 55.1191 l
1.28564 378.2217 L
f
0 R
0.697627 0.675227 0.638575 0.739559 0.137255 0.121569 0.12549 XA
0.5 w 2.61313 M0 XR
1.28564 378.2217 m
608.457 378.2217 L
608.457 55.1191 L
1.28564 55.1191 l
1.28564 378.2217 L
s
*u
1 D
0 O
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
1 w 10 M216.3833 599.4077 m
215.2803 600.5186 213.7437 601.2056 212.041 601.2056 c
210.3604 601.2056 208.8359 600.5308 207.7329 599.4438 c
206.6147 598.3408 205.9082 596.8125 205.877 595.1328 C
205.8765 594.9961 L
205.8945 594.9961 l
205.8945 593.2642 206.5835 591.7012 207.6938 590.5845 c
208.7983 589.4746 210.3374 588.7847 212.041 588.7847 c
213.7437 588.7847 215.2803 589.4727 216.3833 590.5845 c
217.4932 591.7012 218.1836 593.2642 218.1836 594.9961 c
218.1836 596.7271 217.4932 598.2891 216.3833 599.4077 C
F
176.271 569.8125 m
175.167 570.9238 173.6299 571.6123 171.9268 571.6123 c
170.2466 571.6123 168.7227 570.9385 167.6201 569.8516 c
166.5024 568.748 165.7954 567.2192 165.7646 565.5381 C
165.7622 565.4009 L
165.7808 565.4009 l
165.7808 563.6689 166.4717 562.1079 167.5825 560.9912 c
168.6846 559.8804 170.2241 559.1914 171.9268 559.1914 c
173.6299 559.1914 175.167 559.8804 176.271 560.9912 c
177.3804 562.1079 178.0708 563.6689 178.0708 565.4009 c
178.0708 567.1323 177.3804 568.6958 176.271 569.8125 C
f
225.4736 540.2192 m
224.3711 541.3301 222.8325 542.0171 221.1309 542.0171 c
219.4507 542.0171 217.9277 541.3442 216.8237 540.2563 c
215.7061 539.1538 214.999 537.6255 214.9673 535.9443 C
214.9663 535.8076 L
214.9858 535.8076 l
214.9858 534.0771 215.6738 532.5142 216.7847 531.396 c
217.8896 530.2881 219.4287 529.5977 221.1309 529.5977 c
222.8325 529.5977 224.3711 530.2852 225.4736 531.396 c
226.584 532.5142 227.2739 534.0771 227.2739 535.8076 c
227.2739 537.54 226.584 539.1021 225.4736 540.2192 C
f
0 D
141.3726 608.8667 m
137.4951 618.8267 133.1392 628.439 129.0649 637.3208 C
128.8452 637.8018 L
128.8379 637.7988 l
126.6934 642.4531 122.4707 651.625 123.625 658.1768 c
124.6772 664.1436 128.6045 667.8853 137.8408 666.2583 c
146.7739 664.6899 155.8774 662.0747 165.002 658.6177 c
174.5957 654.9829 184.2085 650.4072 193.6597 645.1343 c
216.2813 632.5186 238.2407 617.0381 257.2271 598.7075 c
274.1279 582.3892 288.6851 563.8237 299.2866 543.0234 c
304.9819 531.8516 310.4648 519.356 313.0557 509.187 c
315.4316 499.8672 315.3555 491.9966 311.0879 487.5508 C
309.0986 486.291 l
294.9678 481.397 269.6133 478.9565 241.8223 478.0054 c
201.9268 476.6348 156.8062 478.2598 133.0649 480.0366 c
121.5273 480.9023 117.3579 483.9512 117.7734 489.5142 c
117.9966 492.4966 120.084 495.2544 123.2109 498.4409 C
123.2153 498.4468 l
124.4189 499.6729 125.7759 500.9619 127.2402 502.354 C
128.0752 503.147 l
137.1763 512.3994 143.3535 521.5244 147.2192 530.7666 C
205.7021 530.7666 l
206.5015 528.3091 207.8716 526.1016 209.6572 524.3096 c
212.6006 521.3496 216.6597 519.5171 221.1309 519.5171 c
225.6016 519.5171 229.6611 521.3496 232.6035 524.3096 c
235.5391 527.2627 237.355 531.332 237.355 535.8076 c
237.355 540.2871 235.5391 544.354 232.6035 547.3071 c
229.6611 550.2666 225.6016 552.0996 221.1309 552.0996 c
216.7173 552.0996 212.7061 550.313 209.7749 547.4229 c
207.9404 545.6118 206.5313 543.3643 205.7163 540.8486 C
150.5366 540.8486 L
137.2632 540.8486 L
112.2148 540.8486 L
112.2148 549.6787 L
152.0747 549.6787 l
152.4551 553.1973 152.5786 556.7539 152.4727 560.3613 C
156.4985 560.3613 l
157.2988 557.9014 158.6689 555.6953 160.4536 553.9033 c
163.397 550.9434 167.4565 549.1099 171.9268 549.1099 c
176.3975 549.1099 180.457 550.9434 183.3994 553.9033 c
186.3369 556.8564 188.1514 560.9238 188.1514 565.4009 c
188.1514 569.8804 186.3369 573.9478 183.3994 576.8999 c
180.457 579.8613 176.3975 581.6943 171.9268 581.6943 c
167.5127 581.6943 163.501 579.9072 160.5713 577.0166 c
158.7363 575.2061 157.3276 572.958 156.5122 570.4419 C
154.4102 570.4419 L
63.626 570.4419 L
63.626 579.2725 L
150.1025 579.2725 l
149.3765 582.7695 148.501 586.3267 147.5029 589.9551 C
182.0952 589.9551 L
196.6123 589.9551 l
197.4111 587.4961 198.7813 585.2896 200.5674 583.4971 c
203.5098 580.5361 207.5684 578.7046 212.041 578.7046 c
216.5117 578.7046 220.5708 580.5361 223.5122 583.4971 c
226.4492 586.4497 228.2656 590.519 228.2656 594.9961 c
228.2656 599.4736 226.4492 603.541 223.5122 606.4946 c
220.5708 609.4536 216.5117 611.2866 212.041 611.2866 c
207.6255 611.2866 203.6152 609.5 200.6846 606.6104 c
198.8496 604.8003 197.4399 602.5527 196.6245 600.0352 C
182.0952 600.0352 L
144.4893 600.0352 L
143.0781 600.0352 L
120.3516 600.0352 L
92.2505 600.0352 L
92.2505 608.8667 l
141.3726 608.8667 L
f
*U
*u
1 D
0 0 0 0 1 1 1 Xa
218.1641 253.7061 m
217.0615 254.8164 215.5244 255.5029 213.8218 255.5029 c
212.1411 255.5029 210.6162 254.8291 209.5142 253.7412 c
208.3955 252.6387 207.689 251.1104 207.6577 249.4307 C
207.6572 249.2939 L
207.6753 249.2939 l
207.6753 247.5615 208.3647 246 209.4751 244.8818 c
210.5791 243.7734 212.1182 243.083 213.8218 243.083 c
215.5244 243.083 217.0615 243.7705 218.1641 244.8818 c
219.2744 246 219.9644 247.5615 219.9644 249.2939 c
219.9644 251.0254 219.2744 252.5869 218.1641 253.7061 C
F
178.0518 224.1113 m
176.9482 225.2217 175.4111 225.9102 173.708 225.9102 c
172.0278 225.9102 170.5029 225.2373 169.4009 224.1494 c
168.2832 223.0459 167.5757 221.5176 167.5459 219.8359 C
167.543 219.6982 L
167.5615 219.6982 l
167.5615 217.9668 168.2529 216.4053 169.3633 215.2891 c
170.4653 214.1787 172.0049 213.4893 173.708 213.4893 c
175.4111 213.4893 176.9482 214.1787 178.0518 215.2891 c
179.1616 216.4053 179.8516 217.9668 179.8516 219.6982 c
179.8516 221.4307 179.1616 222.9941 178.0518 224.1113 C
f
227.2544 194.5176 m
226.1523 195.6279 224.6138 196.3154 222.9116 196.3154 c
221.2314 196.3154 219.7085 195.6426 218.6045 194.5547 c
217.4873 193.4521 216.7803 191.9238 216.748 190.2432 C
216.7466 190.1064 L
216.7666 190.1064 l
216.7666 188.375 217.4551 186.8125 218.5654 185.6943 c
219.6704 184.5859 221.21 183.8955 222.9116 183.8955 c
224.6138 183.8955 226.1523 184.583 227.2544 185.6943 c
228.3647 186.8125 229.0547 188.375 229.0547 190.1064 c
229.0547 191.8379 228.3647 193.4004 227.2544 194.5176 C
f
0 D
143.1533 263.165 m
139.2759 273.125 134.9204 282.7373 130.8462 291.6191 C
130.6265 292.0996 L
130.6187 292.0977 l
128.4736 296.751 124.2515 305.9229 125.4058 312.4746 c
126.4585 318.4414 130.3853 322.1836 139.6221 320.5566 c
148.5552 318.9883 157.6582 316.3721 166.7827 312.916 c
176.377 309.2813 185.9893 304.7051 195.4409 299.4326 c
218.063 286.8164 240.0215 271.3369 259.0073 253.0059 c
275.9087 236.6875 290.4663 218.1221 301.0674 197.3213 c
306.7627 186.1494 312.2461 173.6543 314.8369 163.4854 c
317.2119 154.165 317.1367 146.2949 312.8691 141.8486 C
310.8799 140.5889 l
296.749 135.6953 271.3936 133.2549 243.6035 132.3027 c
203.7075 130.9336 158.5869 132.5576 134.8457 134.334 c
123.3081 135.2002 119.1392 138.249 119.5547 143.8125 c
119.7778 146.7949 121.8652 149.5527 124.9912 152.7393 C
124.9966 152.7441 l
126.1997 153.9707 127.5566 155.2607 129.021 156.6514 C
129.856 157.4453 l
138.9575 166.6982 145.1343 175.8223 149.0005 185.0645 C
207.4829 185.0645 l
208.2832 182.6074 209.6528 180.3994 211.438 178.6074 c
214.3813 175.6475 218.4409 173.8145 222.9116 173.8145 c
227.3828 173.8145 231.4419 175.6475 234.3848 178.6074 c
237.3198 181.5605 239.1362 185.6299 239.1362 190.1064 c
239.1362 194.585 237.3198 198.6523 234.3848 201.6055 c
231.4419 204.5645 227.3828 206.3975 222.9116 206.3975 c
218.498 206.3975 214.4868 204.6113 211.5562 201.7207 c
209.7217 199.9102 208.312 197.6631 207.4971 195.1465 C
152.3174 195.1465 L
139.0444 195.1465 L
113.9961 195.1465 L
113.9961 203.9766 L
153.856 203.9766 l
154.2363 207.4951 154.3594 211.0518 154.2534 214.6592 C
158.2793 214.6592 l
159.0796 212.1992 160.4502 209.9932 162.2344 208.2012 c
165.1787 205.2412 169.2373 203.4082 173.708 203.4082 c
178.1792 203.4082 182.2378 205.2412 185.1802 208.2012 c
188.1177 211.1543 189.9326 215.2227 189.9326 219.6982 c
189.9326 224.1777 188.1177 228.2451 185.1802 231.1982 c
182.2378 234.1592 178.1792 235.9922 173.708 235.9922 c
169.2935 235.9922 165.2822 234.2051 162.3525 231.3145 c
160.5181 229.5049 159.1089 227.2568 158.293 224.7402 C
156.1909 224.7402 L
65.4072 224.7402 L
65.4072 233.5703 L
151.8838 233.5703 l
151.1577 237.0674 150.2817 240.625 149.2837 244.2529 C
183.8765 244.2529 L
198.3931 244.2529 l
199.1919 241.7939 200.5625 239.5879 202.3481 237.7949 c
205.2905 234.835 209.3491 233.002 213.8218 233.002 c
218.2925 233.002 222.3511 234.835 225.2935 237.7949 c
228.23 240.748 230.0464 244.8174 230.0464 249.2939 c
230.0464 253.7725 228.23 257.8389 225.2935 260.793 c
222.3511 263.752 218.2925 265.585 213.8218 265.585 c
209.4063 265.585 205.396 263.7979 202.4653 260.9082 c
200.6304 259.0986 199.2202 256.8516 198.4058 254.334 C
183.8765 254.334 L
146.2705 254.334 L
144.8594 254.334 L
122.1328 254.334 L
94.0317 254.334 L
94.0317 263.165 l
143.1533 263.165 L
f
*U
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
1 XR
482.5938 597.6738 m
482.5928 597.6768 l
489.3818 601.2798 497.3096 603.1396 506.1738 603.1396 c
519.5352 603.1396 530.6455 598.5645 538.4072 590.3667 c
546.0811 582.2637 550.4482 570.6538 550.4482 556.4624 C
550.4482 510.207 L
550.4482 486.1978 L
550.4482 480.1577 L
508.8584 480.1577 L
508.8584 486.1978 L
508.8584 510.207 L
508.8584 545.3242 l
508.8584 551.5825 507.0459 556.6357 503.8242 560.1006 c
500.6113 563.5591 495.9414 565.48 490.2305 565.48 C
490.2305 565.4849 l
484.1738 565.3789 479.1729 563.2959 475.498 559.7261 c
471.71 556.0439 469.292 550.749 468.5449 544.3774 C
468.5449 523.6445 L
468.5449 486.1978 L
468.5449 480.1577 L
426.7373 480.1577 L
426.7373 486.1978 L
426.7373 523.6445 L
426.7373 600.144 L
426.7373 601.6104 L
428.2031 601.6104 L
467.0791 601.6104 L
468.5449 601.6104 L
468.5449 600.144 L
468.5449 585.6602 l
472.4111 590.749 477.1279 594.7734 482.5938 597.6738 C
F
0 0 0 0 1 1 1 Xa
484.375 251.9717 m
484.373 251.9746 l
491.1631 255.5781 499.0908 257.4375 507.9551 257.4375 c
521.3154 257.4375 532.4258 252.8623 540.1885 244.665 c
547.8613 236.5615 552.2285 224.9512 552.2285 210.7598 C
552.2285 164.5049 L
552.2285 140.4961 L
552.2285 134.4561 L
510.6387 134.4561 L
510.6387 140.4961 L
510.6387 164.5049 L
510.6387 199.6221 l
510.6387 205.8799 508.8262 210.9346 505.6055 214.3984 c
502.3926 217.8574 497.7227 219.7773 492.0117 219.7773 C
492.0117 219.7832 l
485.9541 219.6768 480.9551 217.5938 477.2793 214.0244 c
473.4912 210.3418 471.0732 205.0469 470.3262 198.6758 C
470.3262 177.9434 L
470.3262 140.4961 L
470.3262 134.4561 L
428.5176 134.4561 L
428.5176 140.4961 L
428.5176 177.9434 L
428.5176 254.4424 L
428.5176 255.9082 L
429.9834 255.9082 L
468.8604 255.9082 L
470.3262 255.9082 L
470.3262 254.4424 L
470.3262 239.958 l
474.1924 245.0469 478.9092 249.0713 484.375 251.9717 C
F
0.75021 0.679683 0.670222 0.90164 0 0 0 Xa
406.7266 622.5205 m
406.2227 622.6982 405.7656 622.8452 405.3623 622.9551 c
404.9443 623.0693 404.5049 623.1704 404.0527 623.2554 c
403.6367 623.3345 403.2354 623.3945 402.8574 623.4312 c
402.5234 623.4648 402.1514 623.4819 401.749 623.4819 c
401.0449 623.4819 400.3809 623.4351 399.7705 623.3447 c
399.1758 623.2568 398.6221 623.1265 398.1201 622.957 c
397.6797 622.8081 397.2637 622.6201 396.8779 622.3945 c
396.5166 622.1831 396.1982 621.9497 395.9326 621.6963 c
395.6719 621.4482 395.4385 621.1689 395.2373 620.8594 c
395.0322 620.542 394.8545 620.189 394.7109 619.8032 c
394.5557 619.3833 394.4336 618.9111 394.3496 618.3867 c
394.2676 617.8765 394.2256 617.2852 394.2256 616.6123 C
394.2256 610.4341 L
394.2256 604.082 L
394.2256 601.6104 L
420.4336 601.6104 L
420.4336 599.7505 L
420.4336 598.2832 L
420.4336 572.5127 L
420.4336 571.0459 L
420.4336 568.8804 L
420.4336 566.7144 L
420.4336 564.2427 L
394.2256 564.2427 L
394.2256 554.9131 L
394.2256 546.3848 L
394.2256 496.4878 L
394.2256 495.0215 L
394.2256 482.3242 L
394.2256 480.1577 L
394.2256 477.9922 L
392.0596 477.9922 L
389.8936 477.9922 L
348.3037 477.9922 L
346.1367 477.9922 L
343.9717 477.9922 L
343.9717 480.1577 L
343.9717 482.3242 L
343.9717 495.0215 L
343.9717 496.4878 L
343.9717 546.3848 L
343.9717 552.2563 L
343.9717 564.2427 L
328.0273 564.2427 L
328.0273 566.7144 L
328.0273 568.8804 L
328.0273 571.0459 L
328.0273 599.7505 L
328.0273 601.6104 L
343.9717 601.6104 L
343.9717 604.082 L
343.9717 610.4341 L
343.9717 613.9561 L
343.9717 619.8882 L
343.9717 620.7842 L
343.9717 621.6802 L
344.0244 621.7334 l
344.124 624.8081 344.4727 627.7344 345.0508 630.5068 c
345.707 633.6563 346.6572 636.6128 347.8682 639.3633 c
349.1572 642.2847 350.7412 644.9873 352.5879 647.457 c
354.4658 649.9697 356.6289 652.2559 359.0381 654.2993 c
361.3164 656.231 363.8076 657.937 366.4814 659.4058 c
369.1699 660.8799 372.0469 662.1216 375.083 663.1172 c
377.835 664.0205 380.7295 664.7231 383.7412 665.2197 c
386.0459 665.5991 388.4248 665.8555 390.8662 665.9863 C
390.8662 666.0913 L
393.0322 666.0913 L
394.0771 666.0913 L
394.0771 666.0835 L
394.6221 666.0859 L
394.6299 666.0942 L
396.7959 666.0942 L
398.9619 666.0942 L
398.9619 665.9917 l
399.6084 665.9609 400.2402 665.9224 400.8564 665.8774 c
402.2383 665.7764 403.5967 665.6421 404.9209 665.478 c
406.4893 665.2852 408.125 665.0313 409.8086 664.7212 c
411.4551 664.417 413.0713 664.0698 414.6406 663.6826 c
416.2412 663.2886 417.8018 662.8516 419.3105 662.377 c
420.8311 661.8999 422.3184 661.3774 423.7617 660.8135 c
425.1484 660.2734 426.5371 659.6689 427.916 659.0088 c
429.249 658.3701 430.5332 657.6909 431.7539 656.9766 C
432.9268 656.2896 L
434.6592 655.2734 L
436.3916 654.2578 L
435.5049 652.4561 L
434.6182 650.6553 L
434.0176 649.4351 L
420.4766 621.9155 L
419.7041 620.3477 L
418.5654 618.0366 L
417.4238 615.7202 L
415.3408 617.2578 L
413.5693 618.5664 L
413.5645 618.5601 L
411.8711 619.8091 l
411.498 620.0835 411.1035 620.3511 410.6934 620.6079 c
410.2695 620.8716 409.8457 621.1162 409.4268 621.3369 c
408.9766 621.5742 408.5303 621.7896 408.0947 621.981 c
407.6572 622.1729 407.1982 622.3545 406.7266 622.5205 C
F
0 0 0 0 1 1 1 Xa
408.5078 276.8184 m
408.0039 276.9961 407.5469 277.1436 407.1436 277.2529 c
406.7256 277.3682 406.2861 277.4688 405.834 277.5537 c
405.418 277.6328 405.0166 277.6924 404.6387 277.7295 c
404.3037 277.7627 403.9326 277.7803 403.5303 277.7803 c
402.8252 277.7803 402.1621 277.7334 401.5508 277.6436 c
400.9561 277.5547 400.4023 277.4248 399.9014 277.2549 c
399.4609 277.1055 399.0439 276.918 398.6582 276.6924 c
398.2969 276.4814 397.9795 276.248 397.7139 275.9941 c
397.4521 275.7471 397.2188 275.4668 397.0186 275.1572 c
396.8135 274.8398 396.6357 274.4873 396.4932 274.1016 c
396.3359 273.6807 396.2139 273.209 396.1309 272.6846 c
396.0488 272.1748 396.0059 271.583 396.0059 270.9111 C
396.0059 264.7314 L
396.0059 258.3799 L
396.0059 255.9082 L
422.2139 255.9082 L
422.2139 254.0488 L
422.2139 252.582 L
422.2139 226.8105 L
422.2139 225.3438 L
422.2139 223.1777 L
422.2139 221.0127 L
422.2139 218.541 L
396.0059 218.541 L
396.0059 209.2109 L
396.0059 200.6826 L
396.0059 150.7852 L
396.0059 149.3193 L
396.0059 136.6221 L
396.0059 134.4561 L
396.0059 132.29 L
393.8408 132.29 L
391.6738 132.29 L
350.084 132.29 L
347.918 132.29 L
345.7529 132.29 L
345.7529 134.4561 L
345.7529 136.6221 L
345.7529 149.3193 L
345.7529 150.7852 L
345.7529 200.6826 L
345.7529 206.5547 L
345.7529 218.541 L
329.8086 218.541 L
329.8086 221.0127 L
329.8086 223.1777 L
329.8086 225.3438 L
329.8086 254.0488 L
329.8086 255.9082 L
345.7529 255.9082 L
345.7529 258.3799 L
345.7529 264.7314 L
345.7529 268.2539 L
345.7529 274.1855 L
345.7529 275.082 L
345.7529 275.9785 L
345.8057 276.0313 l
345.9053 279.1064 346.2529 282.0332 346.832 284.8047 c
347.4883 287.9541 348.4375 290.9102 349.6494 293.6611 c
350.9375 296.583 352.5215 299.2852 354.3682 301.7549 c
356.2471 304.2686 358.4092 306.5537 360.8193 308.5977 c
363.0967 310.5293 365.5889 312.2354 368.2627 313.7031 c
370.9512 315.1787 373.8281 316.4199 376.8633 317.415 c
379.6162 318.3184 382.5107 319.0215 385.5225 319.5176 c
387.8271 319.8975 390.2051 320.1533 392.6475 320.2842 C
392.6475 320.3896 L
394.8125 320.3896 L
395.8584 320.3896 L
395.8584 320.3809 L
396.4023 320.3838 L
396.4111 320.3926 L
398.5771 320.3926 L
400.7422 320.3926 L
400.7422 320.2891 l
401.3896 320.2588 402.0215 320.2207 402.6377 320.1748 c
404.0186 320.0742 405.377 319.9404 406.7021 319.7764 c
408.2705 319.583 409.9053 319.3291 411.5898 319.0195 c
413.2363 318.7148 414.8525 318.3682 416.4219 317.9805 c
418.0215 317.5859 419.583 317.1494 421.0918 316.6758 c
422.6113 316.1973 424.0996 315.6748 425.5439 315.1113 c
426.9297 314.5713 428.3184 313.9668 429.6973 313.3066 c
431.0303 312.668 432.3135 311.9893 433.5352 311.2744 C
434.707 310.5879 L
436.4404 309.5713 L
438.1738 308.5557 L
437.2861 306.7539 L
436.3994 304.9531 L
435.7979 303.7334 L
422.2568 276.2139 L
421.4844 274.6455 L
420.3457 272.335 L
419.2051 270.0186 L
417.1221 271.5557 L
415.3496 272.8643 L
415.3447 272.8584 L
413.6523 274.1064 l
413.2783 274.3818 412.8848 274.6494 412.4746 274.9053 c
412.0508 275.1699 411.627 275.4141 411.208 275.6348 c
410.7578 275.8721 410.3115 276.0879 409.876 276.2783 c
409.4375 276.4707 408.9785 276.6523 408.5078 276.8184 C
F
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
